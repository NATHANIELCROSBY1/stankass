@page "/admin"
@using BlazorAdmin.Services
@using BlazorAdmin.JavaScript

@inject AuthService Auth
@inject IJSRuntime JSRuntime
@inherits BlazorAdmin.Helpers.BlazorComponent

<h1>Manage Product Catalog</h1>

@if (catalogItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Item Type</th>
                <th>Brand</th>
                <th>Id</th>
                <th>Name</th>
                <th>@nameof(CatalogItem.Description)</th>
                <th>@nameof(CatalogItem.Price)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in catalogItems)
            {
                <tr>
                    <td>
                        <img class="esh-thumbnail" src="@($"https://localhost:44315/{item.PictureUri}")">
                    </td>
                    <td>@GetTypeName(item.CatalogTypeId)</td>
                    <td>@GetBrandName(item.CatalogBrandId)</td>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private List<CatalogItem> catalogItems = new List<CatalogItem>();
    private List<CatalogType> catalogTypes = new List<CatalogType>();
    private List<CatalogBrand> catalogBrands = new List<CatalogBrand>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        catalogItems = await new CatalogItemService(Auth).GetPagedCatalogItemsAsync(50);
        catalogTypes = await new CatalogTypeService(Auth).GetCatalogTypesAsync();
        catalogBrands = await new CatalogBrandService(Auth).GetCatalogBrandsAsync();

        if (firstRender)
        {
            CallRequestRefresh();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected string GetTypeName(int typeId)
    {
        var type = catalogTypes.FirstOrDefault(t => t.Id == typeId);

        return type == null ? "None" : type.Name;
    }

    protected string GetBrandName(int brandId)
    {
        var brand = catalogBrands.FirstOrDefault(t => t.Id == brandId);

        return brand == null ? "None" : brand.Name;
    }
}
